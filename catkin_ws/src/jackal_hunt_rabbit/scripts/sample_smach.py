#!/usr/bin/env python

# ----------------------------------------------------------
# FINAL PROJECT - EE5900 Intro to Robotics
# State machine implementation for the project
# Team Members
#   1) Deep Doshi (Team Lead)
#   2) Haden Wasserbaech
#   3) Sabari Manohar
# ----------------------------------------------------------

# load the dependencies for the project
from smach import StateMachine, State, Concurrence
import smach_ros  #### donot know why it is loaded
import rospy
# This is the message type the robot uses for velocities
from geometry_msgs.msg import Twist, Vector3
# This is the message type the robot uses for laserscan
from sensor_msgs.msg import LaserScan
# This is the message type the robot uses for odometry measure
from nav_msgs.msg import Odometry
# numpy library for array manipulation
import numpy as np
import roslib
import math
import random
import sys
import time
import rospkg
import roslaunch
import os

global map_loop
map_loop = 0

class Explorer(State):
    """Exploration of the area."""

    def __init__(self):
        State.__init__(self, outcomes=['ExploredArea'])

    def execute(self, userdata):
	
        uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
	roslaunch.configure_logging(uuid)
	path = rospkg.RosPack()
	r_path = str(path.get_path("jackal_hunt_rabbit")) + "/launch/explor.launch"
	launch = roslaunch.parent.ROSLaunchParent(uuid, [r_path])

	launch.start()
	
	launch.shutdown()

        return 'ExploredArea'

	
class MapSaver(State):
    """Save Map generated by gmapping"""
    def __init__(self):
        State.__init__(self, outcomes=['MapDone'])
    
    def execute(self, userdata):
        rospy.loginfo("Started Mapping")
	
	
        # rospy.init_node('en_Mapping', anonymous=True)
	# rospy.on_shutdown(self.shutdown)

	uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
	roslaunch.configure_logging(uuid)
	path = rospkg.RosPack()
	r_path = str(path.get_path("jackal_hunt_rabbit"))+"/launch/map.launch"
	launch = roslaunch.parent.ROSLaunchParent(uuid, [r_path])
	launch.start()
	
	launch.shutdown()

	return 'MapDone'


class Alvar(State):
    """Alvar detection while exploration."""

    def __init__(self):
        State.__init__(self, outcomes=['AlvarTracked'])

    def execute(self, userdata):
        rospy.loginfo()


class Rotate_anti(State):
    def __init__(self):
        State.__init__(self, outcomes=['RotateAnti'])

    def execute(self, userdata):
        pub = rospy.Publisher("/cmd_vel", Twist, queue_size=5)
        rate = rospy.Rate(50)
        for i in range(120):
            twist_msg = Twist()
            twist_msg.angular.z = -0.5
            pub.publish(twist_msg)
            pub = rospy.Publisher("/jackal_velocity_controller/cmd_vel", Twist, queue_size=5)
            rate.sleep()

        return 'RotateAnti'


def main():
    rospy.init_node('StateMachine')
    
    """FinalSuccess defines the completion the state machine"""	
    sm = StateMachine(outcomes=['FinalSuccess'])

    with sm:
	StateMachine.add('Clock', Explorer(), transitions={'ExploredArea':'Map'})
	
	StateMachine.add('Map', MapSaver(), transitions={'MapDone':'AntiClock'})
        # StateMachine.add('SaveMap', MapSaver(), transitions={'MapDone':'AntiClock'})

        StateMachine.add('AntiClock', Rotate_anti(), transitions={'RotateAnti': 'FinalSuccess'})

    sm.execute()


if __name__ == '__main__':
    main()
